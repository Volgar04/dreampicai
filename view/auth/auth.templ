package auth

import "github.com/Volgar04/dreampicai/view/layout"
import "github.com/nedpals/supabase-go"

templ AccountSetup() {
	@layout.App(true) {
		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
			<h1 class="text-xl font-black mb-5 text-center">Setup your account</h1>
			@AccountSetupForm(AccountSetupParams{}, AccountSetupErrors{})
		</div>
	}
}

type AccountSetupErrors struct {
	Username string
}

type AccountSetupParams struct {
	Username string
}

templ AccountSetupForm(params AccountSetupParams, errors AccountSetupErrors) {
	<form hx-post="/account/setup" hx-swap="outerHTML">
		<label class="form-control w-full max-w-xs">
			<div class="label">
				<span class="label-text">Enter your username</span>
			</div>
			<input class="input input-bordered" type="text" name="username"/>
			<div class="label">
				if len(errors.Username) > 0 {
					<span class="label-text-alt text-error">{ errors.Username }</span>
				}
			</div>
		</label>
		<button class="btn btn-primary">Setup account<i class="fa-solid fa-chevron-right"></i></button>
	</form>
}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to dreampicai</h1>
				@LoginForm(supabase.UserCredentials{}, LoginErrors{})
			</div>
		</div>
	}
}

templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Signup to dreampicai</h1>
				@SignupForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string) {
	<div>A confirmation email has been sent to: <span class="font-semibold text-success">{ email }</span></div>
}

type SignupParams struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type SignupErrors struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
	<form hx-post="/signup" hx-swap="outerHTML" class="space-y-4">
		<div class="">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input
				type="text"
				name="email"
				value={ params.Email }
				required
				autocomplete="off"
				placeholder="Type here"
				class="input input-bordered w-full"
			/>
			if len(errors.Email) >0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input
				type="password"
				name="password"
				required
				autocomplete="off"
				class="input input-bordered w-full"
			/>
			if len(errors.Password) >0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input
				type="password"
				name="confirmPassword"
				required
				autocomplete="off"
				class="input input-bordered w-full"
			/>
			if len(errors.ConfirmPassword) >0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">Login</button>
	</form>
}

type LoginErrors struct {
	Email              string
	Password           string
	InvalidCredentials string
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
	<form hx-post="/login" hx-swap="outerHTML" class="space-y-4">
		<div class="">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input
				type="text"
				name="email"
				value={ creds.Email }
				required
				autocomplete="off"
				placeholder="Type here"
				class="input input-bordered w-full"
			/>
			if len(errors.Email) >0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input
				type="password"
				name="password"
				required
				autocomplete="off"
				placeholder="Type here"
				class="input input-bordered w-full"
			/>
			if len(errors.Password) >0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		if len(errors.InvalidCredentials) >0 {
			<div class="text-sm text-error">
				{ errors.InvalidCredentials }
			</div>
		}
		<button type="submit" class="btn btn-primary w-full">Login</button>
		<div class="divider">OR</div>
		<a href="/login/provider/google" class="btn btn-outline w-full">Login with Google<i class="fa-brands fa-google"></i></a>
	</form>
}

type ResetPasswordParams struct {
	NewPassword string
}

type ResetPasswordErrors struct {
	NewPassword string
}

templ ResetPassword() {
	@layout.App(true) {
		<div class="max-w-2xl w-full mx-auto mt-8">
			<div>
				<h1 class="text-lg font-semibold border-b border-gray-700 pb-2">Password</h1>
				<div class="py-6">
					<div class="text-label mb-2">Enter new password</div>
					@ResetPasswordForm(ResetPasswordErrors{})
				</div>
			</div>
		</div>
	}
}

templ ResetPasswordSuccess(email string) {
	<div>A password reset link is being sent to <span class="text-info font-semibold">{ email }</span></div>
}

templ ResetPasswordForm(errors ResetPasswordErrors) {
	<form
		hx-put="/auth/reset-password"
		hx-swap="outerHTML"
	>
		<div class="mb-4">
			<input
				class="input input-bordered w-full max-w-sm"
				name="password"
				type="password"
			/>
			if len(errors.NewPassword) > 0 {
				<div class="text-sm text-error mt-1">{ errors.NewPassword }</div>
			}
		</div>
		<button class="btn btn-primary">Update password</button>
	</form>
}

templ CallbackScript() {
	<script>
		var url = window.location.href;
		var newUrl = url.replace("#", "?")
		window.location = newUrl
	</script>
}
